from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class Ingredient(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ingredient_id=None, quantity=None, measurement=None, ingredient_name=None):  # noqa: E501
        """Ingredient - a model defined in OpenAPI

        :param ingredient_id: The ingredient_id of this Ingredient.  # noqa: E501
        :type ingredient_id: float
        :param quantity: The quantity of this Ingredient.  # noqa: E501
        :type quantity: float
        :param measurement: The measurement of this Ingredient.  # noqa: E501
        :type measurement: str
        :param ingredient_name: The ingredient_name of this Ingredient.  # noqa: E501
        :type ingredient_name: str
        """
        self.openapi_types = {
            'ingredient_id': float,
            'quantity': float,
            'measurement': str,
            'ingredient_name': str
        }

        self.attribute_map = {
            'ingredient_id': 'ingredientId',
            'quantity': 'quantity',
            'measurement': 'measurement',
            'ingredient_name': 'ingredientName'
        }

        self._ingredient_id = ingredient_id
        self._quantity = quantity
        self._measurement = measurement
        self._ingredient_name = ingredient_name

    @classmethod
    def from_dict(cls, dikt) -> 'Ingredient':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ingredient of this Ingredient.  # noqa: E501
        :rtype: Ingredient
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ingredient_id(self) -> float:
        """Gets the ingredient_id of this Ingredient.


        :return: The ingredient_id of this Ingredient.
        :rtype: float
        """
        return self._ingredient_id

    @ingredient_id.setter
    def ingredient_id(self, ingredient_id: float):
        """Sets the ingredient_id of this Ingredient.


        :param ingredient_id: The ingredient_id of this Ingredient.
        :type ingredient_id: float
        """

        self._ingredient_id = ingredient_id

    @property
    def quantity(self) -> float:
        """Gets the quantity of this Ingredient.


        :return: The quantity of this Ingredient.
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity: float):
        """Sets the quantity of this Ingredient.


        :param quantity: The quantity of this Ingredient.
        :type quantity: float
        """

        self._quantity = quantity

    @property
    def measurement(self) -> str:
        """Gets the measurement of this Ingredient.


        :return: The measurement of this Ingredient.
        :rtype: str
        """
        return self._measurement

    @measurement.setter
    def measurement(self, measurement: str):
        """Sets the measurement of this Ingredient.


        :param measurement: The measurement of this Ingredient.
        :type measurement: str
        """

        self._measurement = measurement

    @property
    def ingredient_name(self) -> str:
        """Gets the ingredient_name of this Ingredient.


        :return: The ingredient_name of this Ingredient.
        :rtype: str
        """
        return self._ingredient_name

    @ingredient_name.setter
    def ingredient_name(self, ingredient_name: str):
        """Sets the ingredient_name of this Ingredient.


        :param ingredient_name: The ingredient_name of this Ingredient.
        :type ingredient_name: str
        """

        self._ingredient_name = ingredient_name
